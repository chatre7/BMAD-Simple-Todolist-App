name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  build-test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node: [18.x, 20.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run typecheck

      - name: Run tests with coverage
        run: npm run coverage

      - name: Post coverage summary to Job Summary
        if: ${{ always() }}
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            node -e "const fs=require('fs'); const p='coverage/coverage-summary.json'; const s=JSON.parse(fs.readFileSync(p,'utf8')); const t=s.total; const md=[ '## Coverage Summary', '', '| Metric | Percentage | Covered / Total |', '|---|---:|---:|', `| Lines | ${t.lines.pct}% | ${t.lines.covered} / ${t.lines.total} |`, `| Statements | ${t.statements.pct}% | ${t.statements.covered} / ${t.statements.total} |`, `| Functions | ${t.functions.pct}% | ${t.functions.covered} / ${t.functions.total} |`, `| Branches | ${t.branches.pct}% | ${t.branches.covered} / ${t.branches.total} |`, '' ].join('\n'); fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, md);"
          else
            echo "No coverage summary found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload coverage artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.node }}
          path: coverage
          if-no-files-found: ignore

      - name: Build
        run: npm run build

      - name: Upload coverage to Codecov
        if: ${{ always() }}
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          flags: unittests
          fail_ci_if_error: false
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
